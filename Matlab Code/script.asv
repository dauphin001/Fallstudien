close all; clc

cOP = classOptimParam();    % constant Optimization Prameters

n = cOP.n;      % number of intervals
tf = cOP.tf;    % time to run from 0 to tf

x = zeros(2*n,1);   % x = [y;v] y: Position v: velocity
u = zeros(2*n,1);   % u = [Mwh;Fb]  Mwh: acceleration   Fb: deceleration
z = [x;u];

cCCP = classCarConstantParam(); % constant Car Parameters

% inequality constraints matrix for acceleration constraints Mwh
% inequalities u_1 >= 0
Aineq1 = diag(repmat([1 0],1,n));
Aineq1 = Aineq1([1:2:2*n],:);
Aineq1 = [zeros(n,2*n),Aineq1];
Aineq1 = -Aineq1;
bineq1 = repmat(cCCP.Mwh_min,n,1);

% inequality constraints matrix for decelaration constraints Fb
% first n rows inequalities u_2 >= 0
% second n rows inequalities u_2 <= Fb_max
Aineq2 = diag(repmat([0 1],1,n));
Aineq2 = Aineq2([2:2:2*n],:);
Aineq2 = [zeros(n,2*n),Aineq2];
Aineq2 = [-Aineq2;Aineq2];
bineq2 = [repmat(cCCP.Fb_min,n,1);repmat(cCCP.Fb_max,n,1)];

% combine the acceleration and deceleration inequality constraints
Aineq = [Aineq1;Aineq2];
bineq = [bineq1;bineq2];

% equality matrix
Aeq = zeros(3,4*n);

Aeq(1,1)=1; % first 2 rows is the initial condition X_0 = [y_0;v_0] = [0;0]
Aeq(2,2)=1;

Aeq(3,2*n)=1;   % final row is the condition v_n = 0
beq = zeros(3,1);

z0 = rand(4*n,1);   % random initial vector
% approximating the initial vector
z0(2) = 0;
z0(2*n) = 0;

% Optimization parameters
options                 = optimoptions('fmincon');
options.Algorithm       = 'sqp';
options.Display         = 'iter';
options.MaxFunEvals     = 6000;

%z0 = fmincon(@(z) 0, z0,Aineq,bineq,Aeq,beq,[],[],@constrFunc,options);
min = fmincon(@costFunc,z0,Aineq,bineq,Aeq,beq,[],[],@constrFunc,options);

figure
subplot(2,1,1)
plot(min(1:2:2*n-1))
title('Solution position y')
subplot(2,1,2)
plot(min(2:2:2*n))
title('Solution velocity v')
